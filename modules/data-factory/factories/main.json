{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "10908609273288445396"
    },
    "name": "Data Factory Module",
    "description": "This module deploys Microsoft.DataFactory",
    "owner": "Arinco"
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The resource name."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The geo-location where the resource lives."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "enableManagedVirtualNetwork": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable managed virtual network."
      }
    },
    "enableManagedVnetIntegrationRuntime": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable the integration runtime inside the managed virtual network. Only required if enableManagedVirtualNetwork is true."
      }
    },
    "publicNetworkAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable or disable public network access."
      }
    },
    "configureGit": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Configure git during deployment."
      }
    },
    "gitRepoType": {
      "type": "string",
      "defaultValue": "FactoryGitHubConfiguration",
      "metadata": {
        "description": "Optional. Git repository type. Azure DevOps = FactoryVSTSConfiguration and GitHub = FactoryGitHubConfiguration."
      },
      "allowedValues": [
        "FactoryVSTSConfiguration",
        "FactoryGitHubConfiguration"
      ]
    },
    "gitAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Git account name. Azure DevOps = Organisation name and GitHub = Username."
      }
    },
    "gitProjectName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Git project name. Only relevant for Azure DevOps."
      }
    },
    "gitRepositoryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Git repository name."
      }
    },
    "gitCollaborationBranch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Optional. The collaboration branch name. Default is main."
      }
    },
    "gitRootFolder": {
      "type": "string",
      "defaultValue": "/",
      "metadata": {
        "description": "Optional. The root folder path name. Default is /."
      }
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable diagnostic logging."
      }
    },
    "diagnosticLogCategoryGroupsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllLogs"
      ],
      "allowedValues": [
        "AllLogs"
      ],
      "metadata": {
        "description": "Optional. The name of log category groups that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Log analytics workspace resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub authorization rule for the Event Hubs namespace. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub name. Only required if enableDiagnostics is set to true."
      }
    },
    "resourceLock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "allowedValues": [
        "NotSpecified",
        "ReadOnly",
        "CanNotDelete"
      ],
      "metadata": {
        "description": "Optional. Specify the type of resource lock."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoryGroupsToEnable'))]",
        "input": {
          "categoryGroup": "[parameters('diagnosticLogCategoryGroupsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true
        }
      }
    ],
    "managedVnetName": "default",
    "managedVnetRuntimeName": "AutoResolveIntegrationRuntime",
    "repoConfiguration": "[if(equals(parameters('gitRepoType'), 'FactoryVSTSConfiguration'), createObject('accountName', parameters('gitAccountName'), 'collaborationBranch', parameters('gitCollaborationBranch'), 'repositoryName', parameters('gitRepositoryName'), 'rootFolder', parameters('gitRootFolder'), 'type', 'FactoryVSTSConfiguration', 'projectName', parameters('gitProjectName')), createObject('accountName', parameters('gitAccountName'), 'collaborationBranch', parameters('gitCollaborationBranch'), 'repositoryName', parameters('gitRepositoryName'), 'rootFolder', parameters('gitRootFolder'), 'type', 'FactoryGitHubConfiguration'))]",
    "lockName": "[toLower(format('{0}-{1}-lck', parameters('name'), parameters('resourceLock')))]",
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
    "diagnosticsName": "[toLower(format('{0}-dgs', parameters('name')))]"
  },
  "resources": [
    {
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {
        "repoConfiguration": "[if(parameters('configureGit'), variables('repoConfiguration'), null())]",
        "publicNetworkAccess": "[if(parameters('publicNetworkAccess'), 'Enabled', 'Disabled')]"
      }
    },
    {
      "condition": "[parameters('enableManagedVirtualNetwork')]",
      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
      "apiVersion": "2018-06-01",
      "name": "[format('{0}/{1}', parameters('name'), variables('managedVnetName'))]",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('enableManagedVnetIntegrationRuntime')]",
      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
      "apiVersion": "2018-06-01",
      "name": "[format('{0}/{1}', parameters('name'), variables('managedVnetRuntimeName'))]",
      "properties": {
        "type": "Managed",
        "managedVirtualNetwork": {
          "referenceName": "[variables('managedVnetName')]",
          "type": "ManagedVirtualNetworkReference"
        },
        "typeProperties": {
          "computeProperties": {
            "location": "AutoResolve"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('name'))]",
        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('name'), variables('managedVnetName'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('resourceLock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.DataFactory/factories/{0}', parameters('name'))]",
      "name": "[variables('lockName')]",
      "properties": {
        "level": "[parameters('resourceLock')]",
        "notes": "[if(equals(parameters('resourceLock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.DataFactory/factories/{0}', parameters('name'))]",
      "name": "[variables('diagnosticsName')]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagnosticLogAnalyticsWorkspaceId')), null(), parameters('diagnosticLogAnalyticsWorkspaceId'))]",
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
        "logs": "[variables('diagnosticsLogs')]",
        "metrics": "[variables('diagnosticsMetrics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DataFactory/factories', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the deployed data factory."
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the deployed data factory."
      }
    },
    "systemAssignedPrincipalId": {
      "type": "string",
      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.DataFactory/factories', parameters('name')), '2018-06-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.DataFactory/factories', parameters('name')), '2018-06-01', 'full').identity.principalId, '')]",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      }
    }
  }
}