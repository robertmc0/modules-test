{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.10-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "4584392463822300819"
    }
  },
  "definitions": {
    "Endpoint": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enabledState": {
          "type": "string",
          "allowedValues": [
            "Disabled",
            "Enabled",
            null
          ],
          "nullable": true
        },
        "policy": {
          "type": "string",
          "nullable": true
        }
      }
    },
    "OriginGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "loadBalancingSettings": {
          "type": "object",
          "properties": {
            "sampleSize": {
              "type": "int"
            },
            "successfulSamplesRequired": {
              "type": "int"
            }
          },
          "nullable": true
        },
        "healthProbeSettings": {
          "type": "object",
          "properties": {
            "probePath": {
              "type": "string"
            },
            "probeRequestType": {
              "type": "string"
            },
            "probeProtocol": {
              "type": "string"
            },
            "probeIntervalInSeconds": {
              "type": "int"
            }
          },
          "nullable": true
        }
      }
    },
    "Origin": {
      "type": "object",
      "properties": {
        "originGroupName": {
          "type": "string"
        },
        "originName": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "httpPort": {
          "type": "int",
          "nullable": true
        },
        "httpsPort": {
          "type": "int",
          "nullable": true
        },
        "originHostHeader": {
          "type": "string"
        },
        "enforceCertificateNameCheck": {
          "type": "bool",
          "nullable": true
        },
        "priority": {
          "type": "int",
          "nullable": true
        },
        "weight": {
          "type": "int",
          "nullable": true
        }
      }
    },
    "Secret": {
      "type": "object",
      "properties": {
        "secretName": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "allowedValues": [
                "CustomerCertificate"
              ]
            },
            "useLatestVersion": {
              "type": "bool",
              "nullable": true
            },
            "certificateSecretId": {
              "type": "string"
            }
          }
        }
      }
    },
    "CustomDomain": {
      "type": "object",
      "properties": {
        "customDomainName": {
          "type": "string"
        },
        "hostName": {
          "type": "string"
        },
        "dnsZoneId": {
          "type": "string"
        },
        "tlsSettings": {
          "type": "object",
          "properties": {
            "certificateType": {
              "type": "string",
              "allowedValues": [
                "CustomerCertificate",
                "ManagedCertificate"
              ]
            },
            "minimumTlsVersion": {
              "type": "string",
              "allowedValues": [
                "TLS12"
              ]
            },
            "secretName": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "policy": {
          "type": "string",
          "nullable": true
        }
      }
    },
    "Route": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string"
        },
        "endpointName": {
          "type": "string"
        },
        "originGroupName": {
          "type": "string"
        },
        "supportedProtocols": {
          "type": "array",
          "prefixItems": [
            {
              "type": "string",
              "allowedValues": [
                "Http"
              ]
            },
            {
              "type": "string",
              "allowedValues": [
                "Https"
              ]
            }
          ],
          "items": false,
          "nullable": true
        },
        "patternsToMatch": {
          "type": "array",
          "prefixItems": [
            {
              "type": "string",
              "allowedValues": [
                "/*"
              ]
            }
          ],
          "items": false,
          "nullable": true
        },
        "forwardingProtocol": {
          "type": "string",
          "allowedValues": [
            "HttpOnly",
            "HttpsOnly"
          ]
        },
        "customDomains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          },
          "nullable": true
        },
        "ruleSets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceReference"
          },
          "nullable": true
        },
        "linkToDefaultDomain": {
          "type": "string",
          "nullable": true
        },
        "httpsRedirect": {
          "type": "string",
          "nullable": true
        },
        "cacheConfiguration": {
          "type": "object",
          "nullable": true
        }
      }
    },
    "Domain": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ResourceReference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "SecurityPolicy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "wafPolicyId": {
          "type": "string"
        },
        "patternsToMatch": {
          "type": "array",
          "nullable": true
        }
      }
    },
    "SecurityPolicyAssociations": {
      "type": "object",
      "properties": {
        "domains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        }
      }
    }
  },
  "parameters": {
    "profileName": {
      "type": "string",
      "metadata": {
        "description": "The name of the existing Front Door Profile."
      }
    },
    "endpoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Endpoint"
      },
      "metadata": {
        "description": "Endpoints to deploy to Frontdoor"
      }
    },
    "originGroups": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/OriginGroup"
      },
      "metadata": {
        "description": "Origin Groups to deploy to Frontdoor"
      }
    },
    "origins": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Origin"
      },
      "metadata": {
        "description": "Origins to deploy to Frontdoor"
      }
    },
    "secrets": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Secret"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Certificates to deploy to Frontdoor"
      }
    },
    "customDomains": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CustomDomain"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Custom domains to deploy to Frontdoor"
      }
    },
    "routes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Route"
      },
      "metadata": {
        "description": "Routes to deploy to Frontdoor"
      }
    },
    "securityPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SecurityPolicy"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Security Policies to deploy to Frontdoor"
      }
    }
  },
  "variables": {
    "endpointsWithPolicy": "[map(filter(parameters('endpoints'), lambda('e', not(empty(tryGet(lambdaVariables('e'), 'policy'))))), lambda('e', createObject('policy', lambdaVariables('e').policy, 'id', resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('profileName'), lambdaVariables('e').name))))]",
    "customDomainsWithPolicy": "[map(filter(parameters('customDomains'), lambda('c', not(empty(tryGet(lambdaVariables('c'), 'policy'))))), lambda('c', createObject('policy', lambdaVariables('c').policy, 'id', resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), lambdaVariables('c').customDomainName))))]",
    "domainsWithPolicy": "[union(variables('endpointsWithPolicy'), variables('customDomainsWithPolicy'))]"
  },
  "resources": {
    "profile": {
      "existing": true,
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2022-11-01-preview",
      "name": "[parameters('profileName')]"
    },
    "endpoint": {
      "copy": {
        "name": "endpoint",
        "count": "[length(parameters('endpoints'))]"
      },
      "type": "Microsoft.Cdn/profiles/afdEndpoints",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('endpoints')[copyIndex()].name)]",
      "location": "global",
      "properties": {
        "enabledState": "[if(contains(parameters('endpoints')[copyIndex()], 'enabledState'), parameters('endpoints')[copyIndex()].enabledState, 'Enabled')]"
      }
    },
    "originGroup": {
      "copy": {
        "name": "originGroup",
        "count": "[length(parameters('originGroups'))]"
      },
      "type": "Microsoft.Cdn/profiles/originGroups",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('originGroups')[copyIndex()].name)]",
      "properties": {
        "loadBalancingSettings": {
          "sampleSize": 4,
          "successfulSamplesRequired": 3
        },
        "healthProbeSettings": {
          "probePath": "[coalesce(tryGet(tryGet(parameters('originGroups')[copyIndex()], 'healthProbeSettings'), 'probePath'), '/')]",
          "probeRequestType": "[coalesce(tryGet(tryGet(parameters('originGroups')[copyIndex()], 'healthProbeSettings'), 'probeRequestType'), 'HEAD')]",
          "probeProtocol": "[coalesce(tryGet(tryGet(parameters('originGroups')[copyIndex()], 'healthProbeSettings'), 'probeProtocol'), 'Https')]",
          "probeIntervalInSeconds": "[tryGet(tryGet(parameters('originGroups')[copyIndex()], 'healthProbeSettings'), 'probeIntervalInSeconds')]"
        }
      }
    },
    "origin": {
      "copy": {
        "name": "origin",
        "count": "[length(parameters('origins'))]"
      },
      "type": "Microsoft.Cdn/profiles/originGroups/origins",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('origins')[copyIndex()].originGroupName, parameters('origins')[copyIndex()].originName)]",
      "properties": {
        "hostName": "[parameters('origins')[copyIndex()].hostName]",
        "httpPort": "[if(contains(parameters('origins')[copyIndex()], 'httpPort'), parameters('origins')[copyIndex()].httpPort, 80)]",
        "httpsPort": "[if(contains(parameters('origins')[copyIndex()], 'httpsPort'), parameters('origins')[copyIndex()].httpsPort, 443)]",
        "originHostHeader": "[if(contains(parameters('origins')[copyIndex()], 'originHostHeader'), parameters('origins')[copyIndex()].originHostHeader, '')]",
        "enforceCertificateNameCheck": "[if(contains(parameters('origins')[copyIndex()], 'enforceCertificateNameCheck'), parameters('origins')[copyIndex()].enforceCertificateNameCheck, true())]",
        "priority": "[if(contains(parameters('origins')[copyIndex()], 'priority'), parameters('origins')[copyIndex()].priority, 1)]",
        "weight": "[if(contains(parameters('origins')[copyIndex()], 'weight'), parameters('origins')[copyIndex()].weight, 100)]"
      },
      "dependsOn": [
        "originGroup"
      ]
    },
    "secret": {
      "copy": {
        "name": "secret",
        "count": "[length(parameters('secrets'))]"
      },
      "type": "Microsoft.Cdn/profiles/secrets",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('secrets')[copyIndex()].secretName)]",
      "properties": {
        "parameters": {
          "type": "CustomerCertificate",
          "useLatestVersion": true,
          "secretSource": {
            "id": "[parameters('secrets')[copyIndex()].parameters.certificateSecretId]"
          }
        }
      }
    },
    "customDomain": {
      "copy": {
        "name": "customDomain",
        "count": "[length(parameters('customDomains'))]"
      },
      "type": "Microsoft.Cdn/profiles/customDomains",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-'))]",
      "properties": {
        "hostName": "[parameters('customDomains')[copyIndex()].hostName]",
        "azureDnsZone": {
          "id": "[parameters('customDomains')[copyIndex()].dnsZoneId]"
        },
        "tlsSettings": {
          "certificateType": "[parameters('customDomains')[copyIndex()].tlsSettings.certificateType]",
          "minimumTlsVersion": "TLS12",
          "secret": "[if(equals(parameters('customDomains')[copyIndex()].tlsSettings.certificateType, 'CustomerCertificate'), createObject('id', resourceId('Microsoft.Cdn/profiles/secrets', parameters('profileName'), coalesce(parameters('customDomains')[copyIndex()].tlsSettings.secretName, 'undefined'))), null())]"
        }
      },
      "dependsOn": [
        "secret"
      ]
    },
    "route": {
      "copy": {
        "name": "route",
        "count": "[length(parameters('routes'))]"
      },
      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
      "apiVersion": "2021-06-01",
      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('routes')[copyIndex()].endpointName, parameters('routes')[copyIndex()].routeName)]",
      "properties": {
        "copy": [
          {
            "name": "customDomains",
            "count": "[length(coalesce(parameters('routes')[copyIndex()].customDomains, createArray()))]",
            "input": {
              "id": "[resourceId('Microsoft.Cdn/profiles/customdomains', parameters('profileName'), replace(coalesce(parameters('routes')[copyIndex()].customDomains, createArray())[copyIndex('customDomains')].name, '.', '-'))]"
            }
          },
          {
            "name": "ruleSets",
            "count": "[length(coalesce(tryGet(parameters('routes')[copyIndex()], 'ruleSets'), createArray()))]",
            "input": {
              "id": "[coalesce(tryGet(parameters('routes')[copyIndex()], 'ruleSets'), createArray())[copyIndex('ruleSets')].id]"
            }
          }
        ],
        "originGroup": {
          "id": "[resourceId('Microsoft.Cdn/profiles/origingroups', parameters('profileName'), parameters('routes')[copyIndex()].originGroupName)]"
        },
        "supportedProtocols": "[if(contains(parameters('routes')[copyIndex()], 'supportedProtocols'), parameters('routes')[copyIndex()].supportedProtocols, createArray('Https'))]",
        "patternsToMatch": "[if(contains(parameters('routes')[copyIndex()], 'patternsToMatch'), parameters('routes')[copyIndex()].patternsToMatch, createArray())]",
        "forwardingProtocol": "[if(contains(parameters('routes')[copyIndex()], 'forwardingProtocol'), parameters('routes')[copyIndex()].forwardingProtocol, 'HttpsOnly')]",
        "linkToDefaultDomain": "[if(contains(parameters('routes')[copyIndex()], 'linkToDefaultDomain'), parameters('routes')[copyIndex()].linkToDefaultDomain, 'Enabled')]",
        "httpsRedirect": "[if(contains(parameters('routes')[copyIndex()], 'httpsRedirect'), parameters('routes')[copyIndex()].httpsRedirect, 'Enabled')]",
        "cacheConfiguration": "[tryGet(parameters('routes')[copyIndex()], 'cacheConfiguration')]"
      },
      "dependsOn": [
        "customDomain",
        "origin"
      ]
    },
    "policy": {
      "copy": {
        "name": "policy",
        "count": "[length(parameters('securityPolicies'))]"
      },
      "type": "Microsoft.Cdn/profiles/securityPolicies",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('securityPolicies')[copyIndex()].name)]",
      "properties": {
        "parameters": {
          "type": "WebApplicationFirewall",
          "associations": [
            {
              "copy": [
                {
                  "name": "domains",
                  "count": "[length(filter(variables('domainsWithPolicy'), lambda('f', equals(lambdaVariables('f').policy, parameters('securityPolicies')[copyIndex()].name))))]",
                  "input": {
                    "id": "[filter(variables('domainsWithPolicy'), lambda('f', equals(lambdaVariables('f').policy, parameters('securityPolicies')[copyIndex()].name)))[copyIndex('domains')].id]"
                  }
                }
              ],
              "patternsToMatch": "[coalesce(tryGet(parameters('securityPolicies')[copyIndex()], 'patternsToMatch'), createArray('/*'))]"
            }
          ],
          "wafPolicy": {
            "id": "[parameters('securityPolicies')[copyIndex()].wafPolicyId]"
          }
        }
      },
      "dependsOn": [
        "customDomain",
        "endpoint"
      ]
    }
  },
  "outputs": {
    "endpoints": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('endpoints'))]",
        "input": {
          "id": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('profileName'), parameters('endpoints')[copyIndex()].name)]",
          "name": "[parameters('endpoints')[copyIndex()]]"
        }
      }
    },
    "customDomains": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('customDomains'))]",
        "input": {
          "id": "[resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-'))]",
          "name": "[parameters('customDomains')[copyIndex()]]"
        }
      }
    }
  }
}