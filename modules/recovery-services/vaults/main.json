{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "3380183901820924845"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The resource name."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The geo-location where the resource lives."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "RS0",
      "allowedValues": [
        "Standard",
        "RS0"
      ],
      "metadata": {
        "description": "Optional. The sku of the recovery services vault."
      }
    },
    "storageType": {
      "type": "string",
      "defaultValue": "GeoRedundant",
      "allowedValues": [
        "LocallyRedundant",
        "GeoRedundant",
        "ReadAccessGeoZoneRedundant",
        "ZoneRedundant"
      ],
      "metadata": {
        "description": "Optional. Storage replication type of the recovery services vault."
      }
    },
    "enablecrossRegionRestore": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable cross region restore."
      }
    },
    "backupPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.recoveryservices/vaults/backuppolicies?pivots=deployment-language-bicep#protectionpolicy-objects",
        "example": {
          "name": "string",
          "properties": {
            "backupManagementType": "string",
            "instantRpRetentionRangeInDays": "int",
            "schedulePolicy": {
              "scheduleRunFrequency": "string",
              "scheduleRunTimes": [
                "string"
              ],
              "schedulePolicyType": "string"
            },
            "timeZone": "string",
            "retentionPolicy": {
              "dailySchedule": {
                "retentionTimes": [
                  "string"
                ],
                "retentionDuration": {
                  "count": "int",
                  "durationType": "string"
                }
              },
              "retentionPolicyType": "string"
            }
          }
        },
        "description": "Optional. Backup policies."
      }
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "addVmToBackupPolicy": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "resourceId": "Azure virtual machine resource id.",
        "backupPolicyName": "Backup policy name.",
        "description": "Optional. Add existing Azure virtual machine(s) to backup policy."
      }
    },
    "resourceLock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of resource lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable diagnostic logging."
      }
    },
    "diagnosticLogCategoryGroupsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllLogs"
      ],
      "allowedValues": [
        "AllLogs"
      ],
      "metadata": {
        "description": "Optional. The name of log category groups that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "Health"
      ],
      "allowedValues": [
        "Health"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Log analytics workspace resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub authorization rule for the Event Hubs namespace. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub name. Only required if enableDiagnostics is set to true."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "vmBackupConfig",
        "count": "[length(parameters('addVmToBackupPolicy'))]",
        "input": {
          "backupPolicyName": "[parameters('addVmToBackupPolicy')[copyIndex('vmBackupConfig')].backupPolicyName]",
          "resourceId": "[parameters('addVmToBackupPolicy')[copyIndex('vmBackupConfig')].resourceId]",
          "backupFabric": "Azure",
          "protectionContainer": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', split(parameters('addVmToBackupPolicy')[copyIndex('vmBackupConfig')].resourceId, '/')[4], last(split(parameters('addVmToBackupPolicy')[copyIndex('vmBackupConfig')].resourceId, '/')))]",
          "protectedItem": "[format('vm;iaasvmcontainerv2;{0};{1}', split(parameters('addVmToBackupPolicy')[copyIndex('vmBackupConfig')].resourceId, '/')[4], last(split(parameters('addVmToBackupPolicy')[copyIndex('vmBackupConfig')].resourceId, '/')))]"
        }
      },
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoryGroupsToEnable'))]",
        "input": {
          "categoryGroup": "[parameters('diagnosticLogCategoryGroupsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
    "lockName": "[toLower(format('{0}-{1}-lck', parameters('name'), parameters('resourceLock')))]",
    "diagnosticsName": "[toLower(format('{0}-dgs', parameters('name')))]"
  },
  "resources": [
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "apiVersion": "2022-04-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "properties": {},
      "sku": {
        "name": "[parameters('sku')]",
        "tier": "Standard"
      }
    },
    {
      "copy": {
        "name": "backupPolicy",
        "count": "[length(parameters('backupPolicies'))]"
      },
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('name'), parameters('backupPolicies')[copyIndex()].name)]",
      "location": "[parameters('location')]",
      "properties": "[parameters('backupPolicies')[copyIndex()].properties]",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupstorageconfig",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/vaultStorageConfig', parameters('name'))]",
      "properties": {
        "crossRegionRestoreFlag": "[parameters('enablecrossRegionRestore')]",
        "storageType": "[parameters('storageType')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "vaultProtectedItem",
        "count": "[length(variables('vmBackupConfig'))]"
      },
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}/{2}/{3}', parameters('name'), variables('vmBackupConfig')[copyIndex()].backupFabric, variables('vmBackupConfig')[copyIndex()].protectionContainer, variables('vmBackupConfig')[copyIndex()].protectedItem)]",
      "properties": {
        "protectedItemType": "Microsoft.Compute/virtualMachines",
        "policyId": "[format('{0}/backupPolicies/{1}', resourceId('Microsoft.RecoveryServices/vaults', parameters('name')), variables('vmBackupConfig')[copyIndex()].backupPolicyName)]",
        "sourceResourceId": "[variables('vmBackupConfig')[copyIndex()].resourceId]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('resourceLock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.RecoveryServices/vaults/{0}', parameters('name'))]",
      "name": "[variables('lockName')]",
      "properties": {
        "level": "[parameters('resourceLock')]",
        "notes": "[if(equals(parameters('resourceLock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.RecoveryServices/vaults/{0}', parameters('name'))]",
      "name": "[variables('diagnosticsName')]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagnosticLogAnalyticsWorkspaceId')), null(), parameters('diagnosticLogAnalyticsWorkspaceId'))]",
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
        "logs": "[variables('diagnosticsLogs')]",
        "metrics": "[variables('diagnosticsMetrics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('name')]",
      "metadata": {
        "description": "The name of the deployed recovery services vault."
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.RecoveryServices/vaults', parameters('name'))]",
      "metadata": {
        "description": "The resource ID of the deployed recovery services vault."
      }
    }
  }
}