{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "1928445938951040550"
    },
    "name": "API Management Module",
    "description": "This module deploys API Management resource.",
    "owner": "Arinco"
  },
  "parameters": {
    "additionalLocations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.apimanagement/2021-08-01/service?tabs=bicep#additionallocation",
        "example": {
          "disableGateway": false,
          "location": "string",
          "publicIpAddressId": "string",
          "sku": {
            "capacity": 1,
            "name": "string"
          },
          "virtualNetworkConfiguration": {
            "subnetResourceId": "string"
          },
          "zones": [
            "string"
          ]
        },
        "description": "Optional. Additional datacenter locations of the API Management service."
      }
    },
    "certificates": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.apimanagement/2021-08-01/service?tabs=bicep#certificateconfiguration",
        "example": {
          "certificate": {
            "expiry": "string",
            "subject": "string",
            "thumbprint": "string"
          },
          "certificatePassword": "string",
          "encodedCertificate": "string",
          "storeName": "string"
        },
        "description": "Optional. List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10."
      },
      "maxLength": 10
    },
    "customProperties": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.apimanagement/2021-08-01/service?tabs=bicep#apimanagementserviceproperties",
        "parameter": "customProperties",
        "description": "Optional. Custom properties of the API Management service."
      }
    },
    "disableGateway": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Property only valid for an API Management service deployed in multiple locations. This can be used to disable the gateway in master region."
      }
    },
    "enableClientCertificate": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway."
      }
    },
    "hostnameConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.apimanagement/2021-08-01/service?tabs=bicep#hostnameconfiguration",
        "example": {
          "certificate": {
            "expiry": "string",
            "subject": "string",
            "thumbprint": "string"
          },
          "certificatePassword": "string",
          "certificateSource": "string",
          "certificateStatus": "string",
          "defaultSslBinding": false,
          "encodedCertificate": "string",
          "hostName": "string",
          "identityClientId": "string",
          "keyVaultId": "string",
          "negotiateClientCertificate": false,
          "type": "string"
        },
        "description": "Optional. Custom hostname configuration of the API Management service."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all Resources."
      }
    },
    "minApiVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Limit control plane API calls to API Management service with version equal to or newer than this value."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the of the API Management service."
      }
    },
    "namedValues": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.apimanagement/2021-08-01/service/namedvalues?tabs=bicep#namedvaluecreatecontractpropertiesornamedvaluecontractproperties",
        "example": {
          "displayName": "string",
          "keyVault": {
            "identityClientId": "string",
            "secretIdentifier": "string"
          },
          "secret": false,
          "tags": [
            "string"
          ],
          "value": "string"
        },
        "description": "Optional. Named values."
      }
    },
    "notificationSenderEmail": {
      "type": "string",
      "defaultValue": "apimgmt-noreply@mail.windowsazure.com",
      "metadata": {
        "description": "Optional. The notification sender email address for the service."
      }
    },
    "publisherEmail": {
      "type": "string",
      "metadata": {
        "description": "The email address of the owner of the service."
      }
    },
    "publisherName": {
      "type": "string",
      "metadata": {
        "description": "The name of the owner of the service."
      }
    },
    "resourcelock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ],
      "metadata": {
        "description": "Optional. Specify the type of lock."
      }
    },
    "restore": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Undelete API Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Developer",
      "allowedValues": [
        "Consumption",
        "Developer",
        "Basic",
        "Basicv2",
        "Standard",
        "Standardv2",
        "Premium"
      ],
      "metadata": {
        "description": "Optional. The pricing tier of this API Management service."
      }
    },
    "skuCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        2
      ],
      "metadata": {
        "description": "Optional. The instance size of this API Management service."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the API Management service in."
      }
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "example": {
          "/subscriptions/<subscription>/resourceGroups/<rgp>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/dev-umi": {}
        },
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "virtualNetworkType": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "External",
        "Internal"
      ],
      "metadata": {
        "description": "Optional. The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only."
      }
    },
    "publicIpAddressId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The full resource ID of an Azure Public IP resource. The public IP address resource is required when setting up API Management with virtual network integration in either external or internal mode. For internal virtual network mode, the public IP address is used only for management operations."
      }
    },
    "zones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "zones": [
          "1",
          "2"
        ],
        "description": "Optional. A list of availability zones denoting where the resource needs to come from."
      }
    },
    "diagnosticLogCategoryGroupsToEnable": {
      "type": "array",
      "defaultValue": [
        "Audit"
      ],
      "allowedValues": [
        "Audit",
        "AllLogs"
      ],
      "metadata": {
        "description": "Optional. The name of log category groups that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "applicationInsightsId": {
      "type": "string",
      "metadata": {
        "description": "Resource ID of the application insights resource."
      }
    },
    "loggerSamplingRate": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Optional. The sample rate for the application insights logger. Defaults to 10%."
      }
    },
    "loggerBackendSettings": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://learn.microsoft.com/en-us/azure/templates/microsoft.apimanagement/service/diagnostics?pivots=deployment-language-arm-template#pipelinediagnosticsettings-1",
        "example": {
          "request": {
            "headers": [
              "X-Forwarded-For"
            ]
          }
        },
        "description": "Optional. Diagnostic settings for incoming/outgoing HTTP messages to backend."
      }
    },
    "loggerFrontendSettings": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://learn.microsoft.com/en-us/azure/templates/microsoft.apimanagement/service/diagnostics?pivots=deployment-language-arm-template#pipelinediagnosticsettings-1",
        "example": {
          "request": {
            "headers": [
              "X-Forwarded-For"
            ]
          }
        },
        "description": "Optional. Diagnostic settings for incoming/outgoing HTTP messages to frontend."
      }
    },
    "loggerHttpCorrelationProtocol": {
      "type": "string",
      "defaultValue": "Legacy",
      "allowedValues": [
        "Legacy",
        "None",
        "W3C"
      ],
      "metadata": {
        "description": "Optional. Correlation protocol to use for application insights diagnostics. Legacy is the default."
      }
    },
    "loggerVerbosity": {
      "type": "string",
      "defaultValue": "information",
      "allowedValues": [
        "error",
        "information",
        "verbose"
      ],
      "metadata": {
        "description": "Optional. The verbosity level applied to traces emitted by trace policies."
      }
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable diagnostic logging."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoryGroupsToEnable'))]",
        "input": {
          "categoryGroup": "[parameters('diagnosticLogCategoryGroupsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true
        }
      }
    ],
    "lockName": "[toLower(format('{0}-{1}-lck', parameters('name'), parameters('resourcelock')))]",
    "diagnosticsName": "[toLower(format('{0}-dgs', parameters('name')))]",
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]",
    "isV2Sku": "[or(equals(parameters('sku'), 'BasicV2'), equals(parameters('sku'), 'StandardV2'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2023-09-01-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('sku')]",
        "capacity": "[parameters('skuCount')]"
      },
      "zones": "[parameters('zones')]",
      "identity": "[variables('identity')]",
      "properties": {
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]",
        "notificationSenderEmail": "[parameters('notificationSenderEmail')]",
        "hostnameConfigurations": "[parameters('hostnameConfigurations')]",
        "additionalLocations": "[parameters('additionalLocations')]",
        "customProperties": "[parameters('customProperties')]",
        "certificates": "[parameters('certificates')]",
        "enableClientCertificate": "[if(parameters('enableClientCertificate'), true(), null())]",
        "disableGateway": "[parameters('disableGateway')]",
        "virtualNetworkType": "[parameters('virtualNetworkType')]",
        "virtualNetworkConfiguration": "[if(not(empty(parameters('subnetResourceId'))), json(format('{{\"subnetResourceId\": \"{0}\"}}', parameters('subnetResourceId'))), null())]",
        "publicIpAddressId": "[if(not(empty(parameters('publicIpAddressId'))), parameters('publicIpAddressId'), null())]",
        "apiVersionConstraint": "[if(not(empty(parameters('minApiVersion'))), json(format('{{\"minApiVersion\": \"{0}\"}}', parameters('minApiVersion'))), null())]",
        "restore": "[parameters('restore')]"
      }
    },
    {
      "copy": {
        "name": "nameValue",
        "count": "[length(parameters('namedValues'))]"
      },
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2023-03-01-preview",
      "name": "[format('{0}/{1}', parameters('name'), format('{0}', parameters('namedValues')[copyIndex()].displayName))]",
      "properties": {
        "displayName": "[parameters('namedValues')[copyIndex()].displayName]",
        "keyVault": "[if(contains(parameters('namedValues')[copyIndex()], 'keyVault'), parameters('namedValues')[copyIndex()].keyVault, null())]",
        "secret": "[if(contains(parameters('namedValues')[copyIndex()], 'secret'), parameters('namedValues')[copyIndex()].secret, false())]",
        "value": "[if(contains(parameters('namedValues')[copyIndex()], 'value'), parameters('namedValues')[copyIndex()].value, null())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(variables('isV2Sku'))]",
      "type": "Microsoft.ApiManagement/service/namedValues",
      "apiVersion": "2023-03-01-preview",
      "name": "[format('{0}/{1}', parameters('name'), 'Logger-Credentials')]",
      "properties": {
        "displayName": "Logger-Credentials",
        "secret": true,
        "value": "[reference(parameters('applicationInsightsId'), '2020-02-02', 'Full').properties.InstrumentationKey]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(variables('isV2Sku'))]",
      "type": "Microsoft.ApiManagement/service/portalsettings",
      "apiVersion": "2023-03-01-preview",
      "name": "[format('{0}/{1}', parameters('name'), 'signin')]",
      "properties": {
        "enabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(variables('isV2Sku'))]",
      "type": "Microsoft.ApiManagement/service/loggers",
      "apiVersion": "2023-03-01-preview",
      "name": "[format('{0}/{1}', parameters('name'), 'applicationInsights')]",
      "properties": {
        "loggerType": "applicationInsights",
        "description": "Application Insights Logger",
        "credentials": {
          "instrumentationKey": "{{Logger-Credentials}}"
        },
        "resourceId": "[parameters('applicationInsightsId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]",
        "[resourceId('Microsoft.ApiManagement/service/namedValues', parameters('name'), 'Logger-Credentials')]"
      ]
    },
    {
      "condition": "[not(variables('isV2Sku'))]",
      "type": "Microsoft.ApiManagement/service/diagnostics",
      "apiVersion": "2023-03-01-preview",
      "name": "[format('{0}/{1}', parameters('name'), 'applicationinsights')]",
      "properties": {
        "alwaysLog": "allErrors",
        "loggerId": "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('name'), 'applicationInsights')]",
        "verbosity": "[parameters('loggerVerbosity')]",
        "httpCorrelationProtocol": "[parameters('loggerHttpCorrelationProtocol')]",
        "frontend": "[parameters('loggerFrontendSettings')]",
        "backend": "[parameters('loggerBackendSettings')]",
        "metrics": true,
        "sampling": {
          "samplingType": "fixed",
          "percentage": "[parameters('loggerSamplingRate')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]",
        "[resourceId('Microsoft.ApiManagement/service/loggers', parameters('name'), 'applicationInsights')]"
      ]
    },
    {
      "condition": "[not(equals(parameters('resourcelock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('name'))]",
      "name": "[variables('lockName')]",
      "properties": {
        "level": "[parameters('resourcelock')]",
        "notes": "[if(equals(parameters('resourcelock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.ApiManagement/service/{0}', parameters('name'))]",
      "name": "[variables('diagnosticsName')]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticLogAnalyticsWorkspaceId'))), parameters('diagnosticLogAnalyticsWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('diagnosticsLogs')]",
        "logAnalyticsDestinationType": "Dedicated"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the API management service"
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the API management service"
      },
      "value": "[resourceId('Microsoft.ApiManagement/service', parameters('name'))]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the API management service was deployed into"
      },
      "value": "[resourceGroup().name]"
    },
    "systemAssignedPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the system assigned identity."
      },
      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2023-09-01-preview', 'full').identity, 'principalId')), reference(resourceId('Microsoft.ApiManagement/service', parameters('name')), '2023-09-01-preview', 'full').identity.principalId, '')]"
    }
  }
}