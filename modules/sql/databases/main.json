{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "14757851759388394342"
    }
  },
  "parameters": {
    "sqlServerName": {
      "type": "string",
      "metadata": {
        "description": "Name of existing Azure SQL Server"
      }
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "Name of Database to create"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location of resource"
      }
    },
    "skuType": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium",
        "vCoreGen5",
        "vCoreGen5Serverless"
      ],
      "metadata": {
        "description": "A predefined set of SkuTypes. Currently template not configured to support Hyper-Scale or Business Critical."
      }
    },
    "skuCapacity": {
      "type": "int",
      "metadata": {
        "description": "If DTU model, define amount of DTU. If vCore model, define number of vCores (max for serverless)"
      }
    },
    "skuMinCapacity": {
      "type": "string",
      "defaultValue": "0.5",
      "metadata": {
        "description": "Min vCore allocation. Applicable for vCore Serverless model only. Feed as string to handle floats."
      }
    },
    "maxDbSize": {
      "type": "int",
      "metadata": {
        "description": "Maximum database size in bytes for allocation."
      }
    },
    "autoPauseDelay": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "Minutes before Auto Pause. Applicable for vCore Serverless model only"
      }
    },
    "retentionPeriod": {
      "type": "int",
      "defaultValue": 35,
      "metadata": {
        "description": "Defines the short term retention period.  Maximum of 35 days."
      }
    },
    "databaseCollation": {
      "type": "string",
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
      "metadata": {
        "description": "The SQL database Collation."
      }
    },
    "zoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether the databases are zone redundant. Only supported in some regions."
      }
    },
    "licenseType": {
      "type": "string",
      "defaultValue": "LicenseIncluded",
      "allowedValues": [
        "BasePrice",
        "LicenseIncluded"
      ],
      "metadata": {
        "description": "For Azure Hybrid Benefit, use BasePrice"
      }
    },
    "readScaleOut": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Allow ReadOnly from secondary endpoints"
      }
    },
    "requestedBackupStorageRedundancy": {
      "type": "string",
      "defaultValue": "Geo",
      "metadata": {
        "description": "Set location of backups, geo, local or zone"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Object containing resource tags."
      }
    },
    "enableResourceLock": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable a Can Not Delete Resource Lock.  Useful for production workloads."
      }
    },
    "diagSettings": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Object containing diagnostics settings. If not provided diagnostics will not be set."
      }
    }
  },
  "variables": {
    "skuMap": {
      "vCoreGen5": {
        "name": "GP_S_Gen5",
        "tier": "GeneralPurpose",
        "family": "Gen5",
        "kind": "v12.0,user,vcore"
      },
      "vCoreGen5Serverless": {
        "name": "GP_S_Gen5",
        "tier": "GeneralPurpose",
        "family": "Gen5",
        "kind": "v12.0,user,vcore,serverless"
      },
      "Basic": {
        "name": "Basic",
        "tier": "Basic",
        "family": "[json('null')]",
        "kind": "v12.0,user"
      },
      "Standard": {
        "name": "Standard",
        "tier": "Standard",
        "family": "[json('null')]",
        "kind": "v12.0,user"
      },
      "Premium": {
        "name": "Premium",
        "tier": "Premium",
        "family": "[json('null')]",
        "kind": "v12.0,user"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
      "location": "[parameters('location')]",
      "tags": "[if(not(empty(parameters('tags'))), parameters('tags'), json('null'))]",
      "sku": {
        "name": "[variables('skuMap')[parameters('skuType')].name]",
        "tier": "[variables('skuMap')[parameters('skuType')].tier]",
        "family": "[variables('skuMap')[parameters('skuType')].family]",
        "capacity": "[parameters('skuCapacity')]"
      },
      "properties": {
        "collation": "[parameters('databaseCollation')]",
        "maxSizeBytes": "[parameters('maxDbSize')]",
        "zoneRedundant": "[parameters('zoneRedundant')]",
        "licenseType": "[parameters('licenseType')]",
        "readScale": "[parameters('readScaleOut')]",
        "minCapacity": "[if(equals(parameters('skuType'), 'vCoreGen5Serverless'), parameters('skuMinCapacity'), json('null'))]",
        "autoPauseDelay": "[if(equals(parameters('skuType'), 'vCoreGen5Serverless'), parameters('autoPauseDelay'), json('null'))]",
        "requestedBackupStorageRedundancy": "[parameters('requestedBackupStorageRedundancy')]"
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('sqlServerName'), parameters('databaseName'), 'default')]",
      "properties": {
        "retentionDays": "[parameters('retentionPeriod')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('diagSettings')))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
      "name": "[if(empty(parameters('diagSettings')), 'dummy-value', parameters('diagSettings').name)]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagSettings').workspaceId), json('null'), parameters('diagSettings').workspaceId)]",
        "storageAccountId": "[if(empty(parameters('diagSettings').storageAccountId), json('null'), parameters('diagSettings').storageAccountId)]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagSettings').eventHubAuthorizationRuleId), json('null'), parameters('diagSettings').eventHubAuthorizationRuleId)]",
        "eventHubName": "[if(empty(parameters('diagSettings').eventHubName), json('null'), parameters('diagSettings').eventHubName)]",
        "logs": [
          {
            "category": "SQLInsights",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "AutomaticTuning",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "QueryStoreRuntimeStatistics",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "QueryStoreWaitStatistics",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "Errors",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "DatabaseWaitStatistics",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "Timeouts",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "Blocks",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "Deadlocks",
            "enabled": "[parameters('diagSettings').enableLogs]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          }
        ],
        "metrics": [
          {
            "category": "Basic",
            "enabled": "[parameters('diagSettings').enableMetrics]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "InstanceAndAppAdvanced",
            "enabled": "[parameters('diagSettings').enableMetrics]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          },
          {
            "category": "WorkloadManagement",
            "enabled": "[parameters('diagSettings').enableMetrics]",
            "retentionPolicy": "[if(empty(parameters('diagSettings').retentionPolicy), json('null'), parameters('diagSettings').retentionPolicy)]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
      ]
    },
    {
      "condition": "[parameters('enableResourceLock')]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2016-09-01",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
      "name": "[format('{0}-delete-lock', parameters('databaseName'))]",
      "properties": {
        "level": "CanNotDelete",
        "notes": "Enabled as part of IaC Deployment"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('databaseName')]",
      "metadata": {
        "description": "The name of the sql database"
      }
    },
    "id": {
      "type": "string",
      "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]",
      "metadata": {
        "description": "The resource ID of the sql database"
      }
    }
  }
}