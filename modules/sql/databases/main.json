{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.8.9.13224",
      "templateHash": "3577266222987415818"
    }
  },
  "parameters": {
    "sqlServerName": {
      "type": "string",
      "metadata": {
        "description": "Name of existing Azure SQL Server."
      }
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "Name of Database to create."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location of resource."
      }
    },
    "createMode": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Copy",
        "Default",
        "OnlineSecondary",
        "PointInTimeRestore",
        "Recovery",
        "Restore",
        "RestoreExternalBackup",
        "RestoreExternalBackupSecondary",
        "RestoreLongTermRetentionBackup",
        "Secondary"
      ],
      "metadata": {
        "description": "Specifies the mode of database creation."
      }
    },
    "skuType": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium",
        "vCoreGen5",
        "vCoreGen5Serverless"
      ],
      "metadata": {
        "description": "A predefined set of SkuTypes. Currently template not configured to support Hyper-Scale or Business Critical."
      }
    },
    "skuCapacity": {
      "type": "int",
      "metadata": {
        "description": "If DTU model, define amount of DTU. If vCore model, define number of vCores (max for serverless)."
      }
    },
    "skuMinCapacity": {
      "type": "string",
      "defaultValue": "0.5",
      "metadata": {
        "description": "Min vCore allocation. Applicable for vCore Serverless model only. Requires string to handle decimals."
      }
    },
    "maxDbSize": {
      "type": "int",
      "metadata": {
        "description": "Maximum database size in bytes for allocation."
      }
    },
    "autoPauseDelay": {
      "type": "int",
      "defaultValue": 60,
      "metadata": {
        "description": "Minutes before Auto Pause. Applicable for vCore Serverless model only."
      }
    },
    "retentionPeriod": {
      "type": "int",
      "defaultValue": 35,
      "metadata": {
        "description": "Defines the short term retention period.  Maximum of 35 days."
      }
    },
    "databaseCollation": {
      "type": "string",
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS",
      "metadata": {
        "description": "The SQL database Collation."
      }
    },
    "zoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Whether the databases are zone redundant. Only supported in some regions."
      }
    },
    "licenseType": {
      "type": "string",
      "defaultValue": "LicenseIncluded",
      "allowedValues": [
        "BasePrice",
        "LicenseIncluded"
      ],
      "metadata": {
        "description": "For Azure Hybrid Benefit, use BasePrice."
      }
    },
    "readScaleOut": {
      "type": "string",
      "defaultValue": "Disabled",
      "metadata": {
        "description": "Allow ReadOnly from secondary endpoints."
      }
    },
    "requestedBackupStorageRedundancy": {
      "type": "string",
      "defaultValue": "Geo",
      "metadata": {
        "description": "Set location of backups, geo, local or zone."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "resourcelock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Optional. Specify the type of lock."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable diagnostic logging."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticLogCategoryGroupsToEnable": {
      "type": "array",
      "defaultValue": [
        "Audit"
      ],
      "allowedValues": [
        "Audit",
        "AllLogs"
      ],
      "metadata": {
        "description": "Optional. The name of log category groups that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoryGroupsToEnable'))]",
        "input": {
          "categoryGroup": "[parameters('diagnosticLogCategoryGroupsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "lockName": "[toLower(format('{0}-{1}-lck', parameters('databaseName'), parameters('resourcelock')))]",
    "diagnosticsName": "[toLower(format('{0}-dgs', parameters('databaseName')))]",
    "skuMap": {
      "vCoreGen5": {
        "name": "GP_S_Gen5",
        "tier": "GeneralPurpose",
        "family": "Gen5",
        "kind": "v12.0,user,vcore"
      },
      "vCoreGen5Serverless": {
        "name": "GP_S_Gen5",
        "tier": "GeneralPurpose",
        "family": "Gen5",
        "kind": "v12.0,user,vcore,serverless"
      },
      "Basic": {
        "name": "Basic",
        "tier": "Basic",
        "family": "[json('null')]",
        "kind": "v12.0,user"
      },
      "Standard": {
        "name": "Standard",
        "tier": "Standard",
        "family": "[json('null')]",
        "kind": "v12.0,user"
      },
      "Premium": {
        "name": "Premium",
        "tier": "Premium",
        "family": "[json('null')]",
        "kind": "v12.0,user"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[variables('skuMap')[parameters('skuType')].name]",
        "tier": "[variables('skuMap')[parameters('skuType')].tier]",
        "family": "[variables('skuMap')[parameters('skuType')].family]",
        "capacity": "[parameters('skuCapacity')]"
      },
      "properties": {
        "collation": "[parameters('databaseCollation')]",
        "maxSizeBytes": "[parameters('maxDbSize')]",
        "zoneRedundant": "[parameters('zoneRedundant')]",
        "licenseType": "[parameters('licenseType')]",
        "readScale": "[parameters('readScaleOut')]",
        "minCapacity": "[if(equals(parameters('skuType'), 'vCoreGen5Serverless'), parameters('skuMinCapacity'), json('null'))]",
        "autoPauseDelay": "[if(equals(parameters('skuType'), 'vCoreGen5Serverless'), parameters('autoPauseDelay'), json('null'))]",
        "requestedBackupStorageRedundancy": "[parameters('requestedBackupStorageRedundancy')]",
        "createMode": "[parameters('createMode')]"
      }
    },
    {
      "type": "Microsoft.Sql/servers/databases/backupShortTermRetentionPolicies",
      "apiVersion": "2021-02-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('sqlServerName'), parameters('databaseName'), 'default')]",
      "properties": {
        "retentionDays": "[parameters('retentionPeriod')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
      "name": "[variables('diagnosticsName')]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticLogAnalyticsWorkspaceId'))), parameters('diagnosticLogAnalyticsWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('diagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('resourcelock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', parameters('sqlServerName'), parameters('databaseName'))]",
      "name": "[variables('lockName')]",
      "properties": {
        "level": "[parameters('resourcelock')]",
        "notes": "[if(equals(parameters('resourcelock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "value": "[parameters('databaseName')]",
      "metadata": {
        "description": "The name of the sql database."
      }
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('databaseName'))]",
      "metadata": {
        "description": "The resource ID of the sql database."
      }
    }
  }
}