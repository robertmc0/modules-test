{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.18.4.5664",
      "templateHash": "375219136819935971"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The resource name."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The geo-location where the resource lives."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "tier": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Tier of an Azure Firewall."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "AZFW_VNet",
      "allowedValues": [
        "AZFW_VNet",
        "AZFW_Hub"
      ],
      "metadata": {
        "description": "Optional. The Azure Firewall Resource SKU. Set to AZFW_Hub only if attaching to a Virtual Hub."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the Azure firewall subnet."
      }
    },
    "publicIpAddressName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the Azure firewall public IP address."
      }
    },
    "firewallManagementConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "subnetResourceId": "Resource ID of the Azure firewall management subnet.",
        "publicIpAddressName": "Name of the Azure firewall management public IP address.",
        "description": "Optional. IP configuration of the Azure Firewall used for management traffic."
      }
    },
    "firewallPolicyId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Existing firewall policy id."
      }
    },
    "availabilityZones": {
      "type": "array",
      "defaultValue": [],
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "metadata": {
        "description": "Optional. A list of availability zones denoting where the resource should be deployed."
      }
    },
    "virtualHubResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the Azure virtual hub."
      }
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable diagnostic logging."
      }
    },
    "diagnosticLogCategoryGroupsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllLogs"
      ],
      "allowedValues": [
        "AllLogs"
      ],
      "metadata": {
        "description": "Optional. The name of log category groups that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Log analytics workspace resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub authorization rule for the Event Hubs namespace. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub name. Only required if enableDiagnostics is set to true."
      }
    },
    "resourceLock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "allowedValues": [
        "NotSpecified",
        "ReadOnly",
        "CanNotDelete"
      ],
      "metadata": {
        "description": "Optional. Specify the type of resource lock."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoryGroupsToEnable'))]",
        "input": {
          "categoryGroup": "[parameters('diagnosticLogCategoryGroupsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "lockName": "[toLower(format('{0}-{1}-lck', parameters('name'), parameters('resourceLock')))]",
    "publicIpFirewallDiagnosticsName": "[toLower(format('{0}-dgs', if(equals(parameters('sku'), 'AZFW_VNet'), parameters('publicIpAddressName'), 'placeholder1')))]",
    "publicIpFirewallMgmtDiagnosticsName": "[toLower(format('{0}-dgs', if(not(empty(parameters('firewallManagementConfiguration'))), parameters('firewallManagementConfiguration').publicIpAddressName, 'placeholder2')))]",
    "firewallDiagnosticsName": "[toLower(format('{0}-dgs', parameters('name')))]",
    "firewallProperties": "[if(equals(parameters('sku'), 'AZFW_VNet'), createObject('sku', createObject('name', parameters('sku'), 'tier', parameters('tier')), 'ipConfigurations', createArray(createObject('name', if(equals(parameters('sku'), 'AZFW_VNet'), parameters('publicIpAddressName'), 'placeholder1'), 'properties', createObject('subnet', createObject('id', parameters('subnetResourceId')), 'publicIPAddress', createObject('id', resourceId('Microsoft.Network/publicIPAddresses', if(equals(parameters('sku'), 'AZFW_VNet'), parameters('publicIpAddressName'), 'placeholder1')))))), 'managementIpConfiguration', if(not(empty(parameters('firewallManagementConfiguration'))), createObject('name', if(not(empty(parameters('firewallManagementConfiguration'))), parameters('firewallManagementConfiguration').publicIpAddressName, 'placeholder2'), 'properties', createObject('subnet', createObject('id', parameters('firewallManagementConfiguration').subnetResourceId), 'publicIPAddress', createObject('id', resourceId('Microsoft.Network/publicIPAddresses', if(not(empty(parameters('firewallManagementConfiguration'))), parameters('firewallManagementConfiguration').publicIpAddressName, 'placeholder2'))))), null()), 'firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null())), createObject('sku', createObject('name', parameters('sku'), 'tier', parameters('tier')), 'hubIPAddresses', createObject('publicIPs', createObject('count', 1)), 'virtualHub', createObject('id', parameters('virtualHubResourceId')), 'firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null())))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('sku'), 'AZFW_VNet')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-01-01",
      "name": "[if(equals(parameters('sku'), 'AZFW_VNet'), parameters('publicIpAddressName'), 'placeholder1')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      },
      "zones": "[parameters('availabilityZones')]"
    },
    {
      "condition": "[and(parameters('enableDiagnostics'), equals(parameters('sku'), 'AZFW_VNet'))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', if(equals(parameters('sku'), 'AZFW_VNet'), parameters('publicIpAddressName'), 'placeholder1'))]",
      "name": "[variables('publicIpFirewallDiagnosticsName')]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagnosticLogAnalyticsWorkspaceId')), null(), parameters('diagnosticLogAnalyticsWorkspaceId'))]",
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
        "logs": "[variables('diagnosticsLogs')]",
        "metrics": "[variables('diagnosticsMetrics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', if(equals(parameters('sku'), 'AZFW_VNet'), parameters('publicIpAddressName'), 'placeholder1'))]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('firewallManagementConfiguration'))), equals(parameters('sku'), 'AZFW_VNet'))]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-01-01",
      "name": "[if(not(empty(parameters('firewallManagementConfiguration'))), parameters('firewallManagementConfiguration').publicIpAddressName, 'placeholder2')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      },
      "zones": "[parameters('availabilityZones')]"
    },
    {
      "condition": "[and(and(not(empty(parameters('firewallManagementConfiguration'))), parameters('enableDiagnostics')), equals(parameters('sku'), 'AZFW_VNet'))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', if(not(empty(parameters('firewallManagementConfiguration'))), parameters('firewallManagementConfiguration').publicIpAddressName, 'placeholder2'))]",
      "name": "[variables('publicIpFirewallMgmtDiagnosticsName')]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagnosticLogAnalyticsWorkspaceId')), null(), parameters('diagnosticLogAnalyticsWorkspaceId'))]",
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
        "logs": "[variables('diagnosticsLogs')]",
        "metrics": "[variables('diagnosticsMetrics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', if(not(empty(parameters('firewallManagementConfiguration'))), parameters('firewallManagementConfiguration').publicIpAddressName, 'placeholder2'))]"
      ]
    },
    {
      "type": "Microsoft.Network/azureFirewalls",
      "apiVersion": "2022-01-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": "[variables('firewallProperties')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', if(equals(parameters('sku'), 'AZFW_VNet'), parameters('publicIpAddressName'), 'placeholder1'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', if(not(empty(parameters('firewallManagementConfiguration'))), parameters('firewallManagementConfiguration').publicIpAddressName, 'placeholder2'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('resourceLock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
      "name": "[variables('lockName')]",
      "properties": {
        "level": "[parameters('resourceLock')]",
        "notes": "[if(equals(parameters('resourceLock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
      "name": "[variables('firewallDiagnosticsName')]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagnosticLogAnalyticsWorkspaceId')), null(), parameters('diagnosticLogAnalyticsWorkspaceId'))]",
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
        "logs": "[variables('diagnosticsLogs')]",
        "metrics": "[variables('diagnosticsMetrics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed Azure firewall."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed Azure firewall."
      },
      "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
    },
    "privateIpAddress": {
      "type": "string",
      "metadata": {
        "description": "Private IP address of the deployed Azure firewall."
      },
      "value": "[if(equals(parameters('sku'), 'AZFW_VNet'), reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2022-01-01').ipConfigurations[0].properties.privateIPAddress, reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2022-01-01').hubIPAddresses.privateIPAddress)]"
    }
  }
}