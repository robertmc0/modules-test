{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.20.4.51522",
      "templateHash": "14122120140993320250"
    },
    "name": "Container Registry",
    "description": "This module deploys Microsoft.ContainerRegistry registry at the subscription level",
    "owner": "Arinco"
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 50,
      "metadata": {
        "description": "Provide a globally unique name of your Azure Container Registry."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The geo-location where the resource lives."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "doc": "https://learn.microsoft.com/en-us/azure/templates/microsoft.containerregistry/registries?pivots=deployment-language-bicep#sku",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. The SKU name of the container registry."
      }
    },
    "adminUserEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The value that indicates whether the admin user is enabled."
      }
    },
    "dataEndpointEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable a single data endpoint per region for serving data. Requires Premium sku."
      }
    },
    "encryptionEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable encryption settings of container registry. Requires Premium sku."
      }
    },
    "userAssignedIdentity": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the user assigned managed identity."
      }
    },
    "userAssignedIdentityId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Client ID of the identity which will be used to access Key Vault."
      }
    },
    "keyVaultIdentifier": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Key Vault URI to access the encryption key. Requires Premium sku."
      }
    },
    "zoneRedundancy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable Zone Redundancy settings of container registry. Must be in a region that supports it. Requires Premium sku."
      }
    },
    "allowNetworkRuleBypass": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
      }
    },
    "disablePublicNetworkAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for the container registry. Requires Premium sku."
      }
    },
    "allowedIpRanges": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed. Requires Premium sku."
      }
    },
    "networkRuleSetDefaultAction": {
      "type": "string",
      "defaultValue": "Deny",
      "allowedValues": [
        "Allow",
        "Deny"
      ],
      "metadata": {
        "description": "Optional. The default action of allow or deny when no other rules match. Requires Premium sku."
      }
    },
    "resourceLock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "allowedValues": [
        "NotSpecified",
        "ReadOnly",
        "CanNotDelete"
      ],
      "metadata": {
        "description": "Optional. Specify the type of resource lock."
      }
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable diagnostic logging."
      }
    },
    "diagnosticLogCategoryGroupsToEnable": {
      "type": "array",
      "defaultValue": [
        "audit"
      ],
      "allowedValues": [
        "audit",
        "allLogs"
      ],
      "metadata": {
        "description": "Optional. The name of log category groups that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Log analytics workspace resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub authorization rule for the Event Hubs namespace. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub name. Only required if enableDiagnostics is set to true."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoryGroupsToEnable'))]",
        "input": {
          "categoryGroup": "[parameters('diagnosticLogCategoryGroupsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true
        }
      },
      {
        "name": "ipRulesAllowedIpRanges",
        "count": "[length(parameters('allowedIpRanges'))]",
        "input": {
          "value": "[parameters('allowedIpRanges')[copyIndex('ipRulesAllowedIpRanges')]]",
          "action": "Allow"
        }
      }
    ],
    "lockName": "[toLower(format('{0}-{1}-lck', parameters('name'), parameters('resourceLock')))]",
    "diagnosticsName": "[toLower(format('{0}-dgs', parameters('name')))]"
  },
  "resources": [
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-09-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "identity": "[if(equals(not(empty(parameters('userAssignedIdentity'))), true()), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentity')), createObject())), null())]",
      "properties": {
        "adminUserEnabled": "[parameters('adminUserEnabled')]",
        "dataEndpointEnabled": "[if(parameters('dataEndpointEnabled'), parameters('dataEndpointEnabled'), null())]",
        "encryption": "[if(parameters('encryptionEnabled'), createObject('keyVaultProperties', createObject('identity', parameters('userAssignedIdentityId'), 'keyIdentifier', parameters('keyVaultIdentifier')), 'status', 'enabled'), null())]",
        "zoneRedundancy": "[if(parameters('zoneRedundancy'), 'Enabled', 'Disabled')]",
        "publicNetworkAccess": "[if(parameters('disablePublicNetworkAccess'), 'Disabled', 'Enabled')]",
        "networkRuleBypassOptions": "[if(parameters('allowNetworkRuleBypass'), 'AzureServices', 'None')]",
        "networkRuleSet": "[if(and(equals(not(empty(variables('ipRulesAllowedIpRanges'))), true()), equals(parameters('disablePublicNetworkAccess'), false())), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', variables('ipRulesAllowedIpRanges')), null())]"
      }
    },
    {
      "condition": "[not(equals(parameters('resourceLock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
      "name": "[variables('lockName')]",
      "properties": {
        "level": "[parameters('resourceLock')]",
        "notes": "[if(equals(parameters('resourceLock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
      ]
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
      "name": "[variables('diagnosticsName')]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagnosticLogAnalyticsWorkspaceId')), null(), parameters('diagnosticLogAnalyticsWorkspaceId'))]",
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
        "logs": "[variables('diagnosticsLogs')]",
        "metrics": "[variables('diagnosticsMetrics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the deployed key vault."
      },
      "value": "[parameters('name')]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the deployed key vault."
      },
      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
    },
    "loginServer": {
      "type": "string",
      "metadata": {
        "description": "The login server URI of the deployed container registry."
      },
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2021-09-01').loginServer]"
    }
  }
}