{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "5770396572873791155"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 15,
      "metadata": {
        "description": "The resource name."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The geo-location where the resource lives."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "instanceCount": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Optional. Number of virtual machine instances to deploy. Digit ## (e.g. 07) will be appended to the resource name if more than one instance is deployed."
      }
    },
    "imageReference": {
      "type": "object",
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/virtualmachines?pivots=deployment-language-bicep#imagereference",
        "example": {
          "publisher": "string",
          "offer": "string",
          "sku": "string",
          "version": "string"
        },
        "description": "Specifies information about the image to use."
      }
    },
    "availabilityZones": {
      "type": "array",
      "defaultValue": [],
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "metadata": {
        "description": "Optional. A list of availability zones denoting the zone in which the virtual machine should be deployed."
      }
    },
    "availabilitySetConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "name": "Availability set name.",
        "platformFaultDomainCount": "Fault Domain count.",
        "platformUpdateDomainCount": "Update Domain count.",
        "description": "Optional. The availability set configuration for the virtual machine. Not required if availabilityZones is set."
      }
    },
    "size": {
      "type": "string",
      "allowedValues": [
        "Basic_A0",
        "Basic_A1",
        "Basic_A2",
        "Basic_A3",
        "Basic_A4",
        "Standard_A0",
        "Standard_A1",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B1ms",
        "Standard_B1s",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS1",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS15_v2",
        "Standard_DS1_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS5_v2",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_M128-32ms",
        "Standard_M128-64ms",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC12s_v3",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24rs_v3",
        "Standard_NC24s_v2",
        "Standard_NC24s_v3",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_NC6s_v3",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "Specifies the size of the virtual machine."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the administrator account."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Specifies the password of the administrator account. Refer to https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/virtualmachines?pivots=deployment-language-bicep#osprofile for password complexity requirements."
      }
    },
    "customData": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies a base-64 encoded string of custom data."
      }
    },
    "linuxConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/virtualmachines?pivots=deployment-language-bicep#linuxconfiguration",
        "example": {
          "disablePasswordAuthentication": "bool",
          "patchSettings": {
            "assessmentMode": "string",
            "automaticByPlatformSettings": {
              "rebootSetting": "string"
            },
            "patchMode": "string"
          },
          "provisionVMAgent": "bool",
          "ssh": {
            "publicKeys": {
              "keyData": "string",
              "path": "string"
            }
          }
        },
        "description": "Optional. Specifies the Linux operating system settings on the virtual machine."
      }
    },
    "windowsConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/templates/microsoft.compute/virtualmachines?pivots=deployment-language-bicep#windowsconfiguration",
        "example": {
          "additionalUnattendContent": {
            "componentName": "string",
            "content": "string",
            "passName": "OobeSystem",
            "settingName": "string"
          },
          "enableAutomaticUpdates": "bool",
          "patchSettings": {
            "assessmentMode": "string",
            "automaticByPlatformSettings": {
              "rebootSetting": "string"
            },
            "enableHotpatching": "bool",
            "patchMode": "string"
          },
          "provisionVMAgent": "bool",
          "timeZone": "string",
          "winRM": {
            "listeners": [
              {
                "certificateUrl": "string",
                "protocol": "string"
              }
            ]
          }
        },
        "description": "Specifies Windows operating system settings on the virtual machine."
      }
    },
    "systemAssignedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enables system assigned managed identity on the resource."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The ID(s) to assign to the resource."
      }
    },
    "osStorageAccountType": {
      "type": "string",
      "allowedValues": [
        "PremiumV2_LRS",
        "Premium_LRS",
        "Premium_ZRS",
        "StandardSSD_LRS",
        "StandardSSD_ZRS",
        "Standard_LRS",
        "UltraSSD_LRS"
      ],
      "metadata": {
        "description": "Specifies the storage account type for the os managed disk."
      }
    },
    "dataDisks": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "storageAccountType": "Specifies the storage account type for the managed disk.",
        "diskSizeGB": "Specifies the size of an empty data disk in gigabytes.",
        "caching": "Specifies the caching requirements. Accepted values are \"None\", \"ReadOnly\" or \"ReadWrite\".",
        "description": "Optional. Specifies the parameters that are used to add a data disk to a virtual machine."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Resource ID of the virtual machine subnet."
      }
    },
    "licenseType": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. Accepted values \"Windows_Client\", \"Windows_Server\", \"RHEL_BYOS\" or \"SLES_BYOS\"."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Log analytics workspace resource id. Only required to enable VM Diagnostics."
      }
    },
    "antiMalwareConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "AntimalwareEnabled": "Enables the Antimalware service. Accepted values \"true or \"false\".",
        "Exclusions": {
          "Extensions": "List of file extensions to exclude from scanning.",
          "Paths": "List of path to files or folders to exclude.",
          "Processes": "List of process exclusions."
        },
        "RealtimeProtectionEnabled": "Enable real-time protection.",
        "ScheduledScanSettings": {
          "isEnabled": "Enables or disables a periodic scan. Accepted values \"true or \"false\".",
          "scanType": "Scan scheduled type.",
          "day": "0 - scan daily, 1 - Sunday, 2 - Monday, 3 - Tuesday..., 7 - Saturday, 8 - disabled.",
          "time": "Hour at which to begin the scheduled scan. Measured in 60 minute increments. 60 mins = 1am, 120 mins = 2am."
        },
        "description": "Optional. Microsoft antimalware configuration. Will not be installed if left blank."
      }
    },
    "domainJoinSettings": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "domainToJoin": "FQDN of the domain to which the session host virtual machines will be joined. E.g. contoso.com.",
        "ouPath": "Organisational unit (OU) to place the session host virtual machines when joining the domain. E.g. OU=testOU;DC=domain;DC=Domain;DC=com.",
        "domainJoinUser": "Username that has privileges to join the session host virtual machines to the domain.",
        "domainJoinPassword": "Password for the domain join user account.",
        "description": "Optional. Domain join configuration. Will not be domain joined if left blank."
      }
    },
    "domainJoinPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Password for the domain join user account."
      }
    },
    "dscConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/dsc-windows",
        "example": {
          "configuration": {
            "url": "http://validURLToConfigLocation",
            "script": "ConfigurationScript.ps1",
            "function": "ConfigurationFunction"
          },
          "configurationArguments": {
            "argument1": "Value1",
            "argument2": "Value2"
          }
        },
        "description": "Optional. Desired state configuration. Will not be executed if left blank."
      }
    },
    "resourceLock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "allowedValues": [
        "NotSpecified",
        "ReadOnly",
        "CanNotDelete"
      ],
      "metadata": {
        "description": "Optional. Specify the type of resource lock."
      }
    }
  },
  "variables": {
    "lockSuffix": "-lck",
    "networkInterfaceSuffix": "-nic",
    "osDiskSuffix": "-osdisk",
    "dataDiskSuffix": "-disk-",
    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
  },
  "resources": [
    {
      "copy": {
        "name": "networkInterface",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}{1}{2}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[copyIndex()], 1)), variables('networkInterfaceSuffix'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[parameters('subnetResourceId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      }
    },
    {
      "condition": "[not(empty(parameters('availabilitySetConfiguration')))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2022-08-01",
      "name": "[if(not(empty(parameters('availabilitySetConfiguration'))), parameters('availabilitySetConfiguration').name, 'placeholder')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformFaultDomainCount": "[parameters('availabilitySetConfiguration').platformFaultDomainCount]",
        "platformUpdateDomainCount": "[parameters('availabilitySetConfiguration').platformUpdateDomainCount]"
      }
    },
    {
      "copy": {
        "name": "virtualMachine",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[copyIndex()], 1)))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": "[variables('identity')]",
      "zones": "[parameters('availabilityZones')]",
      "properties": {
        "availabilitySet": "[if(not(empty(parameters('availabilitySetConfiguration'))), createObject('id', resourceId('Microsoft.Compute/availabilitySets', if(not(empty(parameters('availabilitySetConfiguration'))), parameters('availabilitySetConfiguration').name, 'placeholder'))), null())]",
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}{2}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[copyIndex()], 1)), variables('networkInterfaceSuffix')))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[copyIndex()], 1)))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": "[if(not(empty(parameters('windowsConfiguration'))), parameters('windowsConfiguration'), null())]",
          "linuxConfiguration": "[if(not(empty(parameters('linuxConfiguration'))), parameters('linuxConfiguration'), null())]",
          "customData": "[if(not(empty(parameters('customData'))), parameters('customData'), null())]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('size')]"
        },
        "storageProfile": {
          "copy": [
            {
              "name": "dataDisks",
              "count": "[length(parameters('dataDisks'))]",
              "input": {
                "name": "[format('{0}{1}{2}{3}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[copyIndex()], 1)), variables('dataDiskSuffix'), format('{0:D3}', add(copyIndex('dataDisks'), 1)))]",
                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                "lun": "[copyIndex('dataDisks')]",
                "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                "createOption": "Empty",
                "managedDisk": {
                  "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].storageAccountType]"
                }
              }
            }
          ],
          "imageReference": "[parameters('imageReference')]",
          "osDisk": {
            "name": "[format('{0}{1}{2}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[copyIndex()], 1)), variables('osDiskSuffix'))]",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[parameters('osStorageAccountType')]"
            }
          }
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true
          }
        },
        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/availabilitySets', if(not(empty(parameters('availabilitySetConfiguration'))), parameters('availabilitySetConfiguration').name, 'placeholder'))]",
        "networkInterface"
      ]
    },
    {
      "condition": "[not(empty(parameters('diagnosticLogAnalyticsWorkspaceId')))]",
      "copy": {
        "name": "extension_monitoring",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))), 'Microsoft.EnterpriseCloud.Monitoring')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.EnterpriseCloud.Monitoring",
        "type": "MicrosoftMonitoringAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true,
        "settings": "[if(not(empty(parameters('diagnosticLogAnalyticsWorkspaceId'))), createObject('workspaceId', reference(parameters('diagnosticLogAnalyticsWorkspaceId'), '2015-03-20').customerId), null())]",
        "protectedSettings": "[if(not(empty(parameters('diagnosticLogAnalyticsWorkspaceId'))), createObject('workspaceKey', listKeys(parameters('diagnosticLogAnalyticsWorkspaceId'), '2015-03-20').primarySharedKey), null())]"
      },
      "dependsOn": [
        "extension_joinDomain",
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('diagnosticLogAnalyticsWorkspaceId')))]",
      "copy": {
        "name": "extension_depAgent",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))), 'DependencyAgentWindows')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Monitoring.DependencyAgent",
        "type": "DependencyAgentWindows",
        "typeHandlerVersion": "9.5",
        "autoUpgradeMinorVersion": true
      },
      "dependsOn": [
        "extension_joinDomain",
        "extension_monitoring",
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('diagnosticLogAnalyticsWorkspaceId')))]",
      "copy": {
        "name": "extension_guestHealth",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))), 'GuestHealthWindowsAgent')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Monitor.VirtualMachines.GuestHealth",
        "type": "GuestHealthWindowsAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true
      },
      "dependsOn": [
        "extension_depAgent",
        "extension_joinDomain",
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('diagnosticLogAnalyticsWorkspaceId')))]",
      "copy": {
        "name": "extension_azureMonitorWindowsAgent",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))), 'AzureMonitorWindowsAgent')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Monitor",
        "type": "AzureMonitorWindowsAgent",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true
      },
      "dependsOn": [
        "extension_guestHealth",
        "extension_joinDomain",
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('antiMalwareConfiguration')))]",
      "copy": {
        "name": "extension_antimalware",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))), 'IaaSAntimalware')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": "[parameters('antiMalwareConfiguration')]"
      },
      "dependsOn": [
        "extension_joinDomain",
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('domainJoinSettings'))), not(empty(parameters('domainJoinPassword'))))]",
      "copy": {
        "name": "extension_joinDomain",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))), 'JoinDomain')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "name": "[parameters('domainJoinSettings').domainToJoin]",
          "oUPath": "[parameters('domainJoinSettings').ouPath]",
          "user": "[format('{0}\\{1}', parameters('domainJoinSettings').domainToJoin, parameters('domainJoinSettings').domainJoinUser)]",
          "restart": "true",
          "options": 3
        },
        "protectedSettings": {
          "password": "[parameters('domainJoinPassword')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    },
    {
      "condition": "[not(empty(parameters('dscConfiguration')))]",
      "copy": {
        "name": "extension_dsc",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2022-08-01",
      "name": "[format('{0}/{1}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))), 'Microsoft.Powershell.DSC')]",
      "location": "[parameters('location')]",
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.83",
        "autoUpgradeMinorVersion": true,
        "settings": "[parameters('dscConfiguration')]"
      },
      "dependsOn": [
        "extension_joinDomain",
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('resourceLock'), 'NotSpecified'))]",
      "copy": {
        "name": "lock",
        "count": "[length(range(0, parameters('instanceCount')))]"
      },
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]",
      "name": "[toLower(format('{0}{1}{2}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[copyIndex()], 1)), variables('lockSuffix')))]",
      "properties": {
        "level": "[parameters('resourceLock')]",
        "notes": "[if(equals(parameters('resourceLock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      ]
    }
  ],
  "outputs": {
    "name": {
      "type": "array",
      "copy": {
        "count": "[length(range(0, parameters('instanceCount')))]",
        "input": "[format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1)))]"
      },
      "metadata": {
        "description": "The name of the deployed virtual machines."
      }
    },
    "resourceId": {
      "type": "array",
      "copy": {
        "count": "[length(range(0, parameters('instanceCount')))]",
        "input": "[resourceId('Microsoft.Compute/virtualMachines', format('{0}{1}', parameters('name'), format('{0:D2}', add(range(0, parameters('instanceCount'))[range(0, parameters('instanceCount'))[copyIndex()]], 1))))]"
      },
      "metadata": {
        "description": "The resource ID of the deployed virtual machines."
      }
    }
  }
}