{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "16516095062138722592"
    }
  },
  "parameters": {
    "profileName": {
      "type": "string",
      "metadata": {
        "description": "The name of the existing Front Door/CDN Profile."
      }
    },
    "endpoints": {
      "type": "array",
      "metadata": {
        "doclink": "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/afdendpoints?pivots=deployment-language-bicep",
        "example": [
          {
            "name": "myendpoint",
            "enabledState": "Enabled",
            "autoGeneratedDomainNameLabelScope": "TenantReuse"
          }
        ],
        "description": "Endpoints to deploy to Front Door."
      }
    },
    "originGroups": {
      "type": "array",
      "metadata": {
        "doclink": "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/origingroups?pivots=deployment-language-bicep",
        "example": {
          "name": "myOriginGroup",
          "loadBalancingSettings": {
            "sampleSize": 5,
            "successfulSamplesRequired": 3,
            "additionalLatencyInMilliseconds": 240
          },
          "healthProbeSettings": {
            "probePath": "/",
            "probeRequestType": "HEAD",
            "probeProtocol": "Http",
            "probeIntervalInSeconds": "240"
          },
          "sessionAffinityState": "Enabled"
        },
        "description": "Origin Groups to deploy to Front Door."
      }
    },
    "origins": {
      "type": "array",
      "metadata": {
        "docclink": "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/origingroups/origins?pivots=deployment-language-bicep",
        "example": {
          "enabledState": true,
          "originGroupName": "myOriginGroup",
          "originName": "origin1",
          "hostName": "hostname.com.au",
          "httpPort": "80",
          "httpsPort": "443",
          "originHostHeader": "string",
          "enforceCertificateNameCheck": true,
          "priority": "1",
          "weight": "1000",
          "sharedPrivateLinkResource": {
            "privateLink": {
              "id": "privateLinkResourceId"
            },
            "privateLinkLocation": "location",
            "status": "Approved",
            "requestMessage": "Please approve this request to allow Front Door to access the container app"
          }
        },
        "description": "Origins to deploy to Front Door."
      }
    },
    "secrets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doclink": "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/secrets?pivots=deployment-language-bicep",
        "example": {
          "secretName": "secret1",
          "parameters": {
            "type": "CustomerCertificate",
            "certificateSecretId": "secret resource id to secret in key vault containing certificate"
          }
        },
        "description": "Optional. Secrets to deploy to Front Door. Required if customer certificates are used to secure endpoints."
      }
    },
    "customDomains": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doclink": "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/customdomains?pivots=deployment-language-bicep",
        "example": {
          "customDomainName": "myCustomDomain",
          "hostName": "host.com.au",
          "dnsZoneId": "resource id of DNS Zone",
          "tlsSettings": {
            "certificateType": "ManagedCertificate",
            "minimumTlsVersion": "TLS12"
          }
        },
        "description": "Optional. Custom domains to deploy to Front Door."
      }
    },
    "routes": {
      "type": "array",
      "metadata": {
        "doclink": "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/afdendpoints/routes?pivots=deployment-language-bicep",
        "example": {
          "routeName": "route1",
          "endpointName": "myendpoint",
          "originGroupName": "myOriginGroup",
          "supportedProtocols": [
            "Http",
            "Https"
          ],
          "patternsToMatch": [
            "/*"
          ],
          "forwardingProtocol": "HttpsOnly",
          "customDomains": [
            "myCustomDomain"
          ],
          "ruleSets": [
            "ruleSet1"
          ],
          "linkToDefaultDomain": "Enabled",
          "httpsRedirect": "Enabled"
        },
        "description": "Routes to deploy to Front Door."
      }
    },
    "ruleSets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "doclink": [
          "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/rulesets?pivots=deployment-language-bicep",
          "https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/rulesets/rules?pivots=deployment-language-bicep"
        ],
        "example": {
          "ruleSetName": "MaintenancePageRuleSet",
          "rules": [
            {
              "ruleName": "MaintenancePageRedirectForExternal",
              "actions": [
                {
                  "name": "UrlRedirect",
                  "parameters": {
                    "redirectType": "TemporaryRedirect",
                    "typeName": "DeliveryRuleUrlRedirectActionParameters",
                    "destinationProtocol": "Https"
                  }
                }
              ],
              "conditions": [
                {
                  "name": "RemoteAddress",
                  "parameters": {
                    "operator": "IPMatch",
                    "typeName": "DeliveryRuleRemoteAddressConditionParameters",
                    "negateCondition": false,
                    "matchValues": [
                      "200.1.1.1"
                    ],
                    "transforms": []
                  }
                }
              ],
              "matchProcessingBehavior": "Stop",
              "order": 10
            }
          ]
        },
        "description": "RuleSets to deploy to Front Door."
      }
    },
    "securityPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "example": {
          "name": "securityPolicy1",
          "firewallPolicyId": "resource id to Front Door WAF Policy",
          "endpoints": [
            "myendpoint"
          ],
          "customDomains": [
            "myCustomDomain"
          ]
        },
        "description": "Security Policies to deploy to Front Door."
      }
    }
  },
  "variables": {
    "policyCustomDomainsAssociations": "[map(filter(parameters('securityPolicies'), lambda('sp', not(empty(lambdaVariables('sp').customDomains)))), lambda('sp', createObject('policyName', lambdaVariables('sp').policyName, 'ids', map(lambdaVariables('sp').customDomains, lambda('d', resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(lambdaVariables('d').name, '.', '-')))))))]",
    "policyEndpointAssociations": "[map(filter(parameters('securityPolicies'), lambda('sp', not(empty(lambdaVariables('sp').endpoints)))), lambda('sp', createObject('policyName', lambdaVariables('sp').policyName, 'ids', map(lambdaVariables('sp').endpoints, lambda('ep', resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('profileName'), lambdaVariables('ep').name))))))]",
    "policyDomainAssociations": "[union(variables('policyCustomDomainsAssociations'), variables('policyEndpointAssociations'))]"
  },
  "resources": [
    {
      "copy": {
        "name": "endpoint",
        "count": "[length(parameters('endpoints'))]"
      },
      "type": "Microsoft.Cdn/profiles/afdEndpoints",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('endpoints')[copyIndex()].name)]",
      "location": "global",
      "properties": {
        "enabledState": "[if(contains(parameters('endpoints')[copyIndex()], 'enabledState'), parameters('endpoints')[copyIndex()].enabledState, 'Enabled')]",
        "autoGeneratedDomainNameLabelScope": "[if(contains(parameters('endpoints')[copyIndex()], 'autoGeneratedDomainNameLabelScope'), parameters('endpoints')[copyIndex()].autoGeneratedDomainNameLabelScope, 'TenantReuse')]"
      }
    },
    {
      "copy": {
        "name": "originGroup",
        "count": "[length(parameters('originGroups'))]"
      },
      "type": "Microsoft.Cdn/profiles/originGroups",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('originGroups')[copyIndex()].name)]",
      "properties": {
        "loadBalancingSettings": "[if(contains(parameters('originGroups')[copyIndex()], 'loadBalancingSettings'), createObject('sampleSize', if(contains(parameters('originGroups')[copyIndex()].loadBalancingSettings, 'sampleSize'), parameters('originGroups')[copyIndex()].loadBalancingSettings.sampleSize, 4), 'successfulSamplesRequired', if(contains(parameters('originGroups')[copyIndex()].loadBalancingSettings, 'successfulSamplesRequired'), parameters('originGroups')[copyIndex()].loadBalancingSettings.successfulSamplesRequired, 3), 'additionalLatencyInMilliseconds', if(contains(parameters('originGroups')[copyIndex()].loadBalancingSettings, 'additionalLatencyInMilliseconds'), parameters('originGroups')[copyIndex()].loadBalancingSettings.additionalLatencyInMilliseconds, 50)), createObject('sampleSize', 4, 'successfulSamplesRequired', 3, 'additionalLatencyInMilliseconds', 50))]",
        "healthProbeSettings": "[if(contains(parameters('originGroups')[copyIndex()], 'healthProbeSettings'), createObject('probePath', if(contains(parameters('originGroups')[copyIndex()].healthProbeSettings, 'probePath'), parameters('originGroups')[copyIndex()].healthProbeSettings.probePath, '/'), 'probeRequestType', if(contains(parameters('originGroups')[copyIndex()].healthProbeSettings, 'probeRequestType'), parameters('originGroups')[copyIndex()].healthProbeSettings.probeRequestType, 'HEAD'), 'probeProtocol', if(contains(parameters('originGroups')[copyIndex()].healthProbeSettings, 'probeProtocol'), parameters('originGroups')[copyIndex()].healthProbeSettings.probeProtocol, 'Http'), 'probeIntervalInSeconds', if(contains(parameters('originGroups')[copyIndex()].healthProbeSettings, 'probeIntervalInSeconds'), parameters('originGroups')[copyIndex()].healthProbeSettings.probeIntervalInSeconds, 240)), createObject())]",
        "sessionAffinityState": "[if(contains(parameters('originGroups')[copyIndex()], 'sessionAffinityState'), parameters('originGroups')[copyIndex()].sessionAffinityState, 'Disabled')]"
      }
    },
    {
      "copy": {
        "name": "origin",
        "count": "[length(parameters('origins'))]"
      },
      "type": "Microsoft.Cdn/profiles/originGroups/origins",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('origins')[copyIndex()].originGroupName, parameters('origins')[copyIndex()].originName)]",
      "properties": {
        "hostName": "[parameters('origins')[copyIndex()].hostName]",
        "httpPort": "[if(contains(parameters('origins')[copyIndex()], 'httpPort'), parameters('origins')[copyIndex()].httpPort, 80)]",
        "httpsPort": "[if(contains(parameters('origins')[copyIndex()], 'httpsPort'), parameters('origins')[copyIndex()].httpsPort, 443)]",
        "originHostHeader": "[if(contains(parameters('origins')[copyIndex()], 'originHostHeader'), parameters('origins')[copyIndex()].originHostHeader, parameters('origins')[copyIndex()].hostName)]",
        "enforceCertificateNameCheck": "[if(contains(parameters('origins')[copyIndex()], 'enforceCertificateNameCheck'), parameters('origins')[copyIndex()].enforceCertificateNameCheck, true())]",
        "priority": "[if(contains(parameters('origins')[copyIndex()], 'priority'), parameters('origins')[copyIndex()].priority, 1)]",
        "weight": "[if(contains(parameters('origins')[copyIndex()], 'weight'), parameters('origins')[copyIndex()].weight, 1000)]",
        "sharedPrivateLinkResource": "[if(contains(parameters('origins')[copyIndex()], 'sharedPrivateLinkResource'), parameters('origins')[copyIndex()].sharedPrivateLinkResource, null())]",
        "enabledState": "[if(contains(parameters('origins')[copyIndex()], 'enabledState'), parameters('origins')[copyIndex()].enabledState, 'Enabled')]"
      },
      "dependsOn": [
        "originGroup"
      ]
    },
    {
      "copy": {
        "name": "secret",
        "count": "[length(parameters('secrets'))]"
      },
      "type": "Microsoft.Cdn/profiles/secrets",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('secrets')[copyIndex()].secretName)]",
      "properties": {
        "parameters": {
          "type": "CustomerCertificate",
          "useLatestVersion": true,
          "secretSource": {
            "id": "[parameters('secrets')[copyIndex()].parameters.certificateSecretId]"
          }
        }
      }
    },
    {
      "copy": {
        "name": "customDomain",
        "count": "[length(parameters('customDomains'))]"
      },
      "type": "Microsoft.Cdn/profiles/customDomains",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-'))]",
      "properties": {
        "hostName": "[parameters('customDomains')[copyIndex()].hostName]",
        "azureDnsZone": {
          "id": "[parameters('customDomains')[copyIndex()].dnsZoneId]"
        },
        "tlsSettings": {
          "certificateType": "[parameters('customDomains')[copyIndex()].tlsSettings.certificateType]",
          "minimumTlsVersion": "TLS12",
          "secret": "[if(equals(parameters('customDomains')[copyIndex()].tlsSettings.certificateType, 'CustomerCertificate'), createObject('id', resourceId('Microsoft.Cdn/profiles/secrets', parameters('profileName'), parameters('customDomains')[copyIndex()].tlsSettings.secretName)), null())]"
        }
      },
      "dependsOn": [
        "secret"
      ]
    },
    {
      "copy": {
        "name": "ruleset",
        "count": "[length(parameters('ruleSets'))]"
      },
      "type": "Microsoft.Cdn/profiles/ruleSets",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('ruleSets')[copyIndex()].ruleSetName)]"
    },
    {
      "copy": {
        "name": "route",
        "count": "[length(parameters('routes'))]"
      },
      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('routes')[copyIndex()].endpointName, parameters('routes')[copyIndex()].routeName)]",
      "properties": {
        "copy": [
          {
            "name": "customDomains",
            "count": "[length(if(contains(parameters('routes')[copyIndex()], 'customDomains'), parameters('routes')[copyIndex()].customDomains, createArray()))]",
            "input": {
              "id": "[resourceId('Microsoft.Cdn/profiles/customdomains', parameters('profileName'), replace(if(contains(parameters('routes')[copyIndex()], 'customDomains'), parameters('routes')[copyIndex()].customDomains, createArray())[copyIndex('customDomains')].name, '.', '-'))]"
            }
          },
          {
            "name": "ruleSets",
            "count": "[length(if(contains(parameters('routes')[copyIndex()], 'ruleSets'), parameters('routes')[copyIndex()].ruleSets, createArray()))]",
            "input": {
              "id": "[resourceId('Microsoft.Cdn/profiles/ruleSets', parameters('profileName'), if(contains(parameters('routes')[copyIndex()], 'ruleSets'), parameters('routes')[copyIndex()].ruleSets, createArray())[copyIndex('ruleSets')].name)]"
            }
          }
        ],
        "originGroup": {
          "id": "[resourceId('Microsoft.Cdn/profiles/origingroups', parameters('profileName'), parameters('routes')[copyIndex()].originGroupName)]"
        },
        "supportedProtocols": "[if(contains(parameters('routes')[copyIndex()], 'supportedProtocols'), parameters('routes')[copyIndex()].supportedProtocols, createArray('Https'))]",
        "patternsToMatch": "[if(contains(parameters('routes')[copyIndex()], 'patternsToMatch'), parameters('routes')[copyIndex()].patternsToMatch, createArray())]",
        "forwardingProtocol": "[if(contains(parameters('routes')[copyIndex()], 'forwardingProtocol'), parameters('routes')[copyIndex()].forwardingProtocol, 'HttpsOnly')]",
        "linkToDefaultDomain": "[if(contains(parameters('routes')[copyIndex()], 'linkToDefaultDomain'), parameters('routes')[copyIndex()].linkToDefaultDomain, 'Enabled')]",
        "httpsRedirect": "[if(contains(parameters('routes')[copyIndex()], 'httpsRedirect'), parameters('routes')[copyIndex()].httpsRedirect, 'Enabled')]",
        "cacheConfiguration": "[if(contains(parameters('routes')[copyIndex()], 'cacheConfiguration'), parameters('routes')[copyIndex()].cacheConfiguration, null())]"
      },
      "dependsOn": [
        "customDomain",
        "endpoint",
        "origin",
        "ruleset"
      ]
    },
    {
      "copy": {
        "name": "policy",
        "count": "[length(parameters('securityPolicies'))]"
      },
      "type": "Microsoft.Cdn/profiles/securityPolicies",
      "apiVersion": "2022-11-01-preview",
      "name": "[format('{0}/{1}', parameters('profileName'), parameters('securityPolicies')[copyIndex()].policyName)]",
      "properties": {
        "parameters": {
          "type": "WebApplicationFirewall",
          "associations": [
            {
              "copy": [
                {
                  "name": "domains",
                  "count": "[length(flatten(map(filter(variables('policyDomainAssociations'), lambda('f', equals(lambdaVariables('f').policyName, parameters('securityPolicies')[copyIndex()].policyName))), lambda('policy', lambdaVariables('policy').ids))))]",
                  "input": {
                    "id": "[flatten(map(filter(variables('policyDomainAssociations'), lambda('f', equals(lambdaVariables('f').policyName, parameters('securityPolicies')[copyIndex()].policyName))), lambda('policy', lambdaVariables('policy').ids)))[copyIndex('domains')]]"
                  }
                }
              ],
              "patternsToMatch": [
                "/*"
              ]
            }
          ],
          "wafPolicy": {
            "id": "[parameters('securityPolicies')[copyIndex()].firewallPolicyId]"
          }
        }
      },
      "dependsOn": [
        "customDomain",
        "endpoint"
      ]
    },
    {
      "copy": {
        "name": "rulesModule",
        "count": "[length(parameters('ruleSets'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('rulesModuleDeploy{0}', copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "profileName": {
            "value": "[parameters('profileName')]"
          },
          "rulesetName": {
            "value": "[parameters('ruleSets')[copyIndex()].ruleSetName]"
          },
          "rules": {
            "value": "[parameters('ruleSets')[copyIndex()].rules]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "10128574613656338549"
            }
          },
          "parameters": {
            "profileName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing Front Door/CDN Profile."
              }
            },
            "rulesetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing Front Door/CDN Profile RuleSet."
              }
            },
            "rules": {
              "type": "array",
              "metadata": {
                "description": "The rules to apply to the RuleSet."
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "rule",
                "count": "[length(parameters('rules'))]"
              },
              "type": "Microsoft.Cdn/profiles/ruleSets/rules",
              "apiVersion": "2022-11-01-preview",
              "name": "[format('{0}/{1}/{2}', split(format('{0}/{1}', parameters('profileName'), parameters('rulesetName')), '/')[0], split(format('{0}/{1}', parameters('profileName'), parameters('rulesetName')), '/')[1], parameters('rules')[copyIndex()].ruleName)]",
              "properties": {
                "actions": "[parameters('rules')[copyIndex()].actions]",
                "conditions": "[parameters('rules')[copyIndex()].conditions]",
                "matchProcessingBehavior": "[parameters('rules')[copyIndex()].matchProcessingBehavior]",
                "order": "[parameters('rules')[copyIndex()].order]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "ruleset"
      ]
    }
  ],
  "outputs": {
    "endpoints": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('endpoints'))]",
        "input": {
          "id": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('profileName'), parameters('endpoints')[copyIndex()].name)]",
          "name": "[parameters('endpoints')[copyIndex()].name]",
          "hostName": "[reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('profileName'), parameters('endpoints')[copyIndex()].name), '2022-11-01-preview').hostName]"
        }
      },
      "metadata": {
        "description": "The endpoints of the deployed Azure Front Door Profile."
      }
    },
    "customDomains": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('customDomains'))]",
        "input": {
          "id": "[resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-'))]",
          "name": "[replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-')]",
          "hostname": "[reference(resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-')), '2022-11-01-preview').hostName]",
          "status": "[reference(resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-')), '2022-11-01-preview').deploymentStatus]",
          "state": "[reference(resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-')), '2022-11-01-preview').provisioningState]"
        }
      },
      "metadata": {
        "description": "The custom domains of the deployed Azure Front Door Profile."
      }
    },
    "customDomainValidations": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('customDomains'))]",
        "input": {
          "dnsTxtRecordName": "[format('_dnsauth.{0}', reference(resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-')), '2022-11-01-preview').hostName)]",
          "dnsTxtRecordValue": "[reference(resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-')), '2022-11-01-preview').validationProperties.validationToken]",
          "expiry": "[reference(resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), replace(parameters('customDomains')[copyIndex()].customDomainName, '.', '-')), '2022-11-01-preview').validationProperties.expirationDate]"
        }
      },
      "metadata": {
        "description": "The custom domain validations of the deployed Azure Front Door Profile."
      }
    },
    "securityPolicies": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('securityPolicies'))]",
        "input": {
          "id": "[resourceId('Microsoft.Cdn/profiles/securityPolicies', parameters('profileName'), parameters('securityPolicies')[copyIndex()].policyName)]",
          "name": "[parameters('securityPolicies')[copyIndex()].policyName]",
          "associations": "[reference(resourceId('Microsoft.Cdn/profiles/securityPolicies', parameters('profileName'), parameters('securityPolicies')[copyIndex()].policyName), '2022-11-01-preview').parameters.associations]"
        }
      },
      "metadata": {
        "description": "The security policies of the deployed Azure Front Door Profile."
      }
    },
    "ruleSets": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('ruleSets'))]",
        "input": {
          "id": "[resourceId('Microsoft.Cdn/profiles/ruleSets', parameters('profileName'), parameters('ruleSets')[copyIndex()].ruleSetName)]",
          "name": "[parameters('ruleSets')[copyIndex()].ruleSetName]"
        }
      },
      "metadata": {
        "description": "The ruleSets of the deployed Azure Front Door Profile."
      }
    }
  }
}