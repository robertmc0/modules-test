{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.8.2.30886",
      "templateHash": "586741067134713504"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 50,
      "minLength": 5,
      "metadata": {
        "description": "Name of your Azure PostgreSQL Flexible Server - if error ServerGroupDropping is received during deployment then the server name is not avilable and must be changed to one that is. This can be checked by running a console deployment."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "doc": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/tag-resources?tabs=bicep#arm-templates",
        "example": {
          "tagKey": "string"
        },
        "description": "Optional. Resource tags."
      }
    },
    "skuName": {
      "type": "string",
      "metadata": {
        "description": "The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3."
      }
    },
    "skuTier": {
      "type": "string",
      "allowedValues": [
        "Burstable",
        "GeneralPurpose",
        "MemoryOptimized"
      ],
      "metadata": {
        "description": "The tier of the particular SKU, e.g. Burstable."
      }
    },
    "administratorLogin": {
      "type": "string",
      "metadata": {
        "description": "The administrators login name of a server. Can only be specified when the server is being created (and is required for creation)."
      }
    },
    "administratorLoginPassword": {
      "type": "secureString",
      "metadata": {
        "description": "The administrator login password (required for server creation)."
      }
    },
    "backupRetentionDays": {
      "type": "int",
      "metadata": {
        "description": "Backup retention days for the server."
      }
    },
    "geoRedundantBackup": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "A value indicating whether Geo-Redundant backup is enabled on the server."
      }
    },
    "createMode": {
      "type": "string",
      "defaultValue": "Create",
      "allowedValues": [
        "Create",
        "Default",
        "PointInTimeRestore",
        "Update"
      ],
      "metadata": {
        "description": "The mode to create a new PostgreSQL server."
      }
    },
    "highAvailabilityMode": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "ZoneRedundant"
      ],
      "metadata": {
        "description": "The HA mode for the server."
      }
    },
    "standbyAvailabilityZone": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Availability zone information of the standby."
      }
    },
    "privateDnsZoneArmResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Private dns zone arm resource id in which to create the Private DNS zone for this PostgreSQL server."
      }
    },
    "delegatedSubnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Delegated subnet arm resource id. Subnet must be dedicated to Azure PostgreSQL servers."
      }
    },
    "customWindow": {
      "type": "string",
      "defaultValue": "disabled",
      "allowedValues": [
        "disabled",
        "enabled"
      ],
      "metadata": {
        "description": "Indicates whether custom maintenance window is enabled or disabled."
      }
    },
    "dayOfWeek": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Day of week for maintenance window."
      }
    },
    "startHour": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Start hour for maintenance window."
      }
    },
    "startMinute": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Start minute for maintenance window."
      }
    },
    "storageSizeGB": {
      "type": "int",
      "metadata": {
        "description": "Max storage allowed for a server."
      }
    },
    "version": {
      "type": "string",
      "allowedValues": [
        "11",
        "12",
        "13"
      ],
      "metadata": {
        "description": "The version of a server."
      }
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable diagnostic logs"
      }
    },
    "diagnosticLogCategoryGroupsToEnable": {
      "type": "array",
      "defaultValue": [
        "Audit"
      ],
      "allowedValues": [
        "Audit",
        "AllLogs"
      ],
      "metadata": {
        "description": "Optional. The name of log category groups that will be streamed."
      }
    },
    "diagnosticMetricsToEnable": {
      "type": "array",
      "defaultValue": [
        "AllMetrics"
      ],
      "allowedValues": [
        "AllMetrics"
      ],
      "metadata": {
        "description": "Optional. The name of metrics that will be streamed."
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticLogAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Log analytics workspace resource id. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub authorization rule for the Event Hubs namespace. Only required if enableDiagnostics is set to true."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event hub name. Only required if enableDiagnostics is set to true."
      }
    },
    "resourcelock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "allowedValues": [
        "NotSpecified",
        "ReadOnly",
        "CanNotDelete"
      ],
      "metadata": {
        "description": "Optional. Specify the type of resource lock."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "diagnosticsLogs",
        "count": "[length(parameters('diagnosticLogCategoryGroupsToEnable'))]",
        "input": {
          "categoryGroup": "[parameters('diagnosticLogCategoryGroupsToEnable')[copyIndex('diagnosticsLogs')]]",
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
        "input": {
          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "diagnosticsName": "[format('{0}-dgs', parameters('name'))]",
    "lockName": "[toLower(format('{0}-{1}-lck', parameters('name'), parameters('resourcelock')))]"
  },
  "resources": [
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2022-01-20-preview",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('skuName')]",
        "tier": "[parameters('skuTier')]"
      },
      "properties": {
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "backup": {
          "backupRetentionDays": "[parameters('backupRetentionDays')]",
          "geoRedundantBackup": "[parameters('geoRedundantBackup')]"
        },
        "createMode": "[parameters('createMode')]",
        "highAvailability": {
          "mode": "[parameters('highAvailabilityMode')]",
          "standbyAvailabilityZone": "[parameters('standbyAvailabilityZone')]"
        },
        "maintenanceWindow": {
          "customWindow": "[parameters('customWindow')]",
          "dayOfWeek": "[parameters('dayOfWeek')]",
          "startHour": "[parameters('startHour')]",
          "startMinute": "[parameters('startMinute')]"
        },
        "network": {
          "delegatedSubnetResourceId": "[if(not(empty(parameters('delegatedSubnetResourceId'))), parameters('delegatedSubnetResourceId'), null())]",
          "privateDnsZoneArmResourceId": "[if(not(empty(parameters('privateDnsZoneArmResourceId'))), parameters('privateDnsZoneArmResourceId'), null())]"
        },
        "storage": {
          "storageSizeGB": "[parameters('storageSizeGB')]"
        },
        "version": "[parameters('version')]"
      }
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('name'))]",
      "name": "[variables('diagnosticsName')]",
      "properties": {
        "workspaceId": "[if(empty(parameters('diagnosticLogAnalyticsWorkspaceId')), null(), parameters('diagnosticLogAnalyticsWorkspaceId'))]",
        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
        "logs": "[variables('diagnosticsLogs')]",
        "metrics": "[variables('diagnosticsMetrics')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
      ]
    },
    {
      "condition": "[not(equals(parameters('resourcelock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2017-04-01",
      "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', parameters('name'))]",
      "name": "[variables('lockName')]",
      "properties": {
        "level": "[parameters('resourcelock')]",
        "notes": "[if(equals(parameters('resourcelock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('name'))]"
      ]
    }
  ]
}